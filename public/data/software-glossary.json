[
  {
    "term": "Agile",
    "definition": "A software development methodology that uses an iterative approach. It emphasizes collaboration, customer feedback, and the incremental delivery of software.",
    "category": "Software development and methodology"
  },
  {
    "term": "Application Programming Interface (API)",
    "definition": "A set of rules and protocols that allows different software applications to communicate and interact with one another.",
    "category": "Software development and methodology"
  },
  {
    "term": "Continuous Integration/Continuous Deployment (CI/CD)",
    "definition": "A practice that automates the integration of code changes and the deployment of new software updates. It helps teams identify and resolve integration issues early.",
    "category": "Software development and methodology"
  },
  {
    "term": "Framework",
    "definition": "A collection of pre-written code, libraries, and tools that provides a foundation for building software. It offers a structured way for developers to build applications.",
    "category": "Software development and methodology"
  },
  {
    "term": "Integrated Development Environment (IDE)",
    "definition": "A software application that provides comprehensive tools for developers to write, test, and debug code, such as a code editor, a compiler, and a debugger.",
    "category": "Software development and methodology"
  },
  {
    "term": "Open source",
    "definition": "Software whose source code is made available to the public. It can be used, modified, and distributed by anyone.",
    "category": "Software development and methodology"
  },
  {
    "term": "Software Development Life Cycle (SDLC)",
    "definition": "The entire process of developing software, including planning, design, coding, testing, and deployment.",
    "category": "Software development and methodology"
  },
  {
    "term": "Version control",
    "definition": "A system, such as Git, that tracks changes to source code over time. It allows multiple developers to work on a project simultaneously while maintaining a complete history of changes.",
    "category": "Software development and methodology"
  },
  {
    "term": "Algorithm",
    "definition": "A systematic, step-by-step set of instructions designed to perform a computation or solve a specific problem.",
    "category": "Programming and execution"
  },
  {
    "term": "Bug",
    "definition": "An error, flaw, or fault in a computer program that causes it to produce an incorrect or unexpected result.",
    "category": "Programming and execution"
  },
  {
    "term": "Code",
    "definition": "The instructions written by a programmer that a computer can understand and execute. The two main types are: Source code: The human-readable code written by a programmer. Object code/machine code: The low-level, machine-readable instructions that are compiled from source code.",
    "category": "Programming and execution"
  },
  {
    "term": "Debugging",
    "definition": "The process of identifying, analyzing, and removing bugs or errors from software.",
    "category": "Programming and execution"
  },
  {
    "term": "Exception handling",
    "definition": "A programming mechanism that manages and responds to unexpected events or errors that occur during program execution.",
    "category": "Programming and execution"
  },
  {
    "term": "Library",
    "definition": "A collection of reusable functions, classes, and subroutines that can be used by developers to add new features to their programs.",
    "category": "Programming and execution"
  },
  {
    "term": "Refactoring",
    "definition": "The process of restructuring existing computer code without changing its external behavior. The goal is to improve the design, structure, or readability of the code.",
    "category": "Programming and execution"
  },
  {
    "term": "Syntax",
    "definition": "The set of rules that defines how to write code that is grammatically correct for a specific programming language.",
    "category": "Programming and execution"
  },
  {
    "term": "Client-server",
    "definition": "An architecture where a 'client' (like a web browser) requests data or a service from a 'server' (a powerful computer that stores the data).",
    "category": "Architecture and infrastructure"
  },
  {
    "term": "Cloud computing",
    "definition": "The delivery of on-demand computing services—including servers, storage, databases, networking, software, and analytics—over the internet.",
    "category": "Architecture and infrastructure"
  },
  {
    "term": "Containerization",
    "definition": "A method for packaging an application with all its necessary components (code, runtime, libraries) into an isolated 'container.' This allows it to run consistently on any computing environment.",
    "category": "Architecture and infrastructure"
  },
  {
    "term": "Microservices",
    "definition": "An architectural approach where a single application is composed of many loosely coupled, independently deployable smaller services.",
    "category": "Architecture and infrastructure"
  },
  {
    "term": "Platform",
    "definition": "A specific combination of hardware and software that forms the environment for running applications. It can include an operating system, hardware architecture, and other software.",
    "category": "Architecture and infrastructure"
  },
  {
    "term": "SaaS (Software as a Service)",
    "definition": "A software delivery model where a third-party provider hosts applications and makes them available to customers over the internet.",
    "category": "Architecture and infrastructure"
  },
  {
    "term": "Alpha testing",
    "definition": "A form of early-stage testing conducted by developers to identify bugs and validate core functionality before the software is released to the public.",
    "category": "Testing and quality assurance"
  },
  {
    "term": "Beta testing",
    "definition": "A stage of software testing where a pre-release version of a product is given to a group of external users (the 'beta testers') to test it in a real-world environment.",
    "category": "Testing and quality assurance"
  },
  {
    "term": "Functional testing",
    "definition": "The process of verifying that an application's features and functions meet the requirements and behave as expected.",
    "category": "Testing and quality assurance"
  },
  {
    "term": "Unit testing",
    "definition": "A type of software testing that tests individual components or 'units' of the source code to determine if they are fit for use.",
    "category": "Testing and quality assurance"
  },
  {
    "term": "User experience (UX)",
    "definition": "The overall experience a user has with a software application, including its ease of use, accessibility, and overall satisfaction.",
    "category": "Testing and quality assurance"
  },
  {
    "term": "User interface (UI)",
    "definition": "The visual design, interactive elements, and overall look and feel of a software application that a user interacts with.",
    "category": "Testing and quality assurance"
  }
]
